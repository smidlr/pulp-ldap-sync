#!/usr/bin/env python
"""
The pulp-ldap-sync script is used for syncing LDAP users with pulp

"""

import string
import ConfigParser
import sys
import ldap
from optparse import OptionParser
import urllib2
import base64
import json
import requests


class LDAPConn(object):
    """
    LDAP connector class

    Defines methods for retrieving users and groups from LDAP server.

    """
    def __init__(self, uri, base, user, passwd):
        self.uri   = uri
        self.base  = base
        self.ldap_user  = user
        self.ldap_pass  = passwd

    def connect(self):
        """
        Establish a connection to the LDAP server.
        """
        self.conn  = ldap.initialize(self.uri)

        try:
            #self.conn.simple_bind(self.ldap_user, self.ldap_pass)
            self.conn.simple_bind()
        except ldap.SERVER_DOWN as e:
            raise SystemExit, 'Cannot connect to LDAP server: %s' % e

    def disconnect(self):
        """
        Disconnect from the LDAP server.
        """
        self.conn.unbind()

    def get_group_members(self, group):
        """
        Retrieves the members of an LDAP group
        """
        attrlist = ['memberUid']
        filter   = group_filter = "(&(objectClass=posixGroup)(cn=%s))" % group

        result = self.conn.search_s(base=self.base,
                                    scope=ldap.SCOPE_SUBTREE,
                                    filterstr=filter,
                                    attrlist=attrlist)

        if not result:
            print '>>> Unable to find group %s, skipping group' % group
            return None

        dn, users = result.pop()

        # dots are not supported by Pulp
        return [user.replace('.', '_') for user in users['memberUid']]

class PulpConn(object):
    """
    Pulp connector class
    """
    def __init__(self, config):
        self.config = config

    def get_users(self):
        """
        Retrieves the existing Pulp users
        """

        url = "https://%s/%s" % (self.config.pulp_server, '/pulp/api/v2/users/')
        r = requests.get(url, auth=(self.config.pulp_username, self.config.pulp_password), verify=False)

        users = [user['login'] for user in r.json()]

        return users

    def get_roles(self):
        """
        Retrieves the existing Pulp roles
        """

        url = "https://%s/%s" % (self.config.pulp_server, '/pulp/api/v2/roles/')
        r = requests.get(url, auth=(self.config.pulp_username, self.config.pulp_password), verify=False)

        roles = {}
        for role in r.json():
            roles[role['id']] = role['users']

        return roles

    def create_user(self, user):
        """
        Creates a new Pulp user
        """

        url = "https://%s/%s" % (self.config.pulp_server, '/pulp/api/v2/users/')
        data = json.dumps({'login': user, 'password': '', 'name': user}) 
        r = requests.post(url, data, auth=(self.config.pulp_username, self.config.pulp_password), verify=False)

        return r.json()

    def delete_user(self, user):
        """
        Deletes a Pulp user
        """

        url = "https://%s/%s" % (self.config.pulp_server, '/pulp/api/v2/users/')
        r = requests.delete(url, auth=(self.config.pulp_username, self.config.pulp_password), verify=False)

        return r.status_code

    def sync_users(self):
        """
        Syncs Pulp with LDAP users

        """
        ldap_conn = LDAPConn(self.config.ldap_uri, self.config.ldap_base, self.config.ldap_user, self.config.ldap_pass)
        ldap_conn.connect()

        pulp_all_users = self.get_users()
        pulp_all_roles = self.get_roles()

        for group in self.config.ldap_groups:
            ldap_users = ldap_conn.get_group_members(group)

            if not ldap_users:
                continue

            # is the mapping between LDAP group and Pulp defined?
            if group not in self.config.pulp_mapping:
                print '>>> Mapping for group %s is not defined' % group
                continue
            else:
                pulp_role = self.config.pulp_mapping[group]

            # does the Pulp role from mapping exist?
            if pulp_role not in pulp_all_roles:
                print '>>> Role %s defined in mapping does not exist' % pulp_role
                continue

            missing_users = set(ldap_users) - set(pulp_all_users)

            # add missing users
            for user in missing_users:
                # create new user if it does not exists already
                if user not in pulp_all_users:
                    print '>>> Creating user %s with role %s' % (user, pulp_role)
                    self.create_user(user)
                    pulp_all_users.append(user)
                else:
                    # update existing user - add role
                    print '>>> Adding role %s to user %s' % (pulp_role, user)
                    # TODO
                    #self.update_user(each_user, zb_grpid)

            # TODO: record extra users, delete on finish
            extra_users = set(pulp_all_roles[pulp_role]) - set(ldap_users)
            if extra_users:
                print '>>> Users in group %s which are not found in LDAP group:' % group
                for user in extra_users:
                    # ignore admin
                    if user != 'admin':
                        print ' * %s' % user

        # TODO: delete remaining extra users

        ldap_conn.disconnect()

class PulpLDAPConf(object):

    def __init__(self, config):
        self.config = config

    def load_config(self):
        """
        loads the configuration file
        """
        parser = ConfigParser.ConfigParser()
        parser.read(self.config)

        try:
            self.ldap_uri      = parser.get('ldap', 'uri')
            self.ldap_base     = parser.get('ldap', 'base')
            self.ldap_groups   = parser.get('ldap', 'groups').split(',')
            self.ldap_user     = parser.get('ldap', 'binduser')
            self.ldap_pass     = parser.get('ldap', 'bindpass')
            self.pulp_server   = parser.get('pulp', 'server')
            self.pulp_username = parser.get('pulp', 'username')
            self.pulp_password = parser.get('pulp', 'password')
            self.pulp_mapping  = {}
            for group_pairs in parser.get('pulp', 'mapping').split(','):
                pair = group_pairs.split(':')
		self.pulp_mapping[pair[0]] = pair[1]
        except ConfigParser.NoOptionError as e:
            raise SystemExit, 'Configuration issues detected in %s' % self.config

def main():
    # parse command line
    parser = OptionParser()
    parser.add_option("-f", "--file", dest="config", help="Configuration file to use")
    parser.set_usage('%prog [options]')
    (options, args) = parser.parse_args()

    if not options.config:
        print parser.print_help()
        sys.exit(1)

    config = PulpLDAPConf(options.config)
    config.load_config()

    pulp_conn = PulpConn(config)
    pulp_conn.sync_users()

if __name__ == '__main__':
    main()
